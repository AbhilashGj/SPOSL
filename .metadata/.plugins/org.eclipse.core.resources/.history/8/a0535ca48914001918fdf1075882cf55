import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;


public class pass2 {
	ArrayList registers;
	HashMap symtab, littab;
	int lc;
	
	public pass2(){
		registers.add("AREG,");
		registers.add("BREG,");
		lc = 0;
	}
	
	public void read_tables() throws IOException{
		//Add symbols
		BufferedReader br = new BufferedReader(new FileReader("../A1/symbol"));
		String line;
		while((line = br.readLine()) != null){
			String [] words = line.split("\t");
			symtab.put(words[0], words[1]);
		}
		br.close();
		
		//Add literals
		br = new BufferedReader(new FileReader("../A1/literal"));
		
		while((line = br.readLine()) != null){
			String [] words = line.split("\t");
			littab.put(words[0], words[1]);
		}
	}
	
	public void parse_intermediate_code() throws IOException{
		
		BufferedReader br = new BufferedReader(new FileReader("../A1/intermediate_code"));
		PrintWriter pr = new PrintWriter("target.out");
		
		String line;
		
		//Get line counter
		if((line = br.readLine()) != null){
			if(line.split("\t")[0].equalsIgnoreCase("(AD,01)")){
				lc = Integer.parseInt(line.split("\t")[1]);
			}
		}
		
		
		while((line = br.readLine()) != null){
			
			String [] words = line.split("\t");
			String sign = "+";
			String opcode;
			String reg;
			int mem_add;
			
			// Get opcode
			if(words.length >= 2){
				// If it is IS 
				if(words[0].split(",")[0].split("(")[1].equalsIgnoreCase("IS")){
					opcode = words[0].split(",")[1].split(")")[0];
					if(opcode.equalsIgnoreCase("09") || opcode.equalsIgnoreCase("10")){
						reg = "0";
						mem_add = ((Integer)symtab.get("words[1]")).intValue();
						pr.write(lc + "\t" + sign + "\t" + opcode + "\t" + reg + "\t" + mem_add);
						lc += 1;
					}
					else{
						reg = Integer.toString(registers.indexOf(words[1].split(",")));
						mem_add = ((Integer)symtab.get("words[1]")).intValue();
						pr.write(lc + "\t" + sign + "\t" + opcode + "\t" + reg + "\t" + mem_add);
						lc += 1;
					}
				}
				//If it is DS
				else if(words[0].split(",")[0].split("(")[1].equalsIgnoreCase("DS")){
					opcode = words[0].split(",")[1].split(")")[0];
					if(opcode.equalsIgnoreCase("01")){
						pr.write(lc + "\t" + sign + "/t" + "00\t0\t" + words[1]);
						lc += 1;
					}
					else{
						lc += words[1];
					}
				}
			}
		}
	}
}
